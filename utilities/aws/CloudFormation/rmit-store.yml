AWSTemplateFormatVersion: '2010-09-09'
Description: 'This is a template for launching a EC2 Instance that host a RMITStore Server'
Resources:
  AnsibleEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: s3804811_asm2
      SecurityGroupIds: 
        - minikube
      Tags: 
        - Key: Name
          Value: RMIT_Store_Ansible
      Monitoring: true
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -
          
          # Change hostname
          rm -f /etc/hostname
          echo "ansible_server" >> /etc/hostname

          echo '
          #!/bin/bash

          # Check if COSC2767-RMIT-Store/ exists
          if [ -d "COSC2767-RMIT-Store" ]; then
              echo "Removing COSC2767-RMIT-Store/..."
              rm -rf COSC2767-RMIT-Store/
              echo "COSC2767-RMIT-Store/ removed."
          fi

          git clone -b dev https://github.com/RMIT-DevOps-Hackathon/COSC2767-RMIT-Store.git

          # Install tree command to show the directory tree of the pulled repository
          sudo yum install tree -y
          tree ~/COSC2767-RMIT-Store/

          # Navigate to the COSC2767-RMIT-Store directory
          cd ~/COSC2767-RMIT-Store/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."

          # Source .bashrc to apply changes
          source ~/.bashrc
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          # Clone RMIT Store repository
          git clone -b dev https://github.com/RMIT-DevOps-Hackathon/COSC2767-RMIT-Store.git


  RMITStoreDatabaseEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: s3804811_asm2
      SecurityGroupIds: 
        - minikube
      Tags: 
        - Key: Name
          Value: RMIT_Store_DB
      Monitoring: true
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -
          
          # Change hostname
          rm -f /etc/hostname
          echo "db_server" >> /etc/hostname

          echo '
          #!/bin/bash

          # Check if COSC2767-RMIT-Store/ exists
          if [ -d "COSC2767-RMIT-Store" ]; then
              echo "Removing COSC2767-RMIT-Store/..."
              rm -rf COSC2767-RMIT-Store/
              echo "COSC2767-RMIT-Store/ removed."
          fi

          git clone -b dev https://github.com/RMIT-DevOps-Hackathon/COSC2767-RMIT-Store.git

          # Install tree command to show the directory tree of the pulled repository
          sudo yum install tree -y
          tree ~/COSC2767-RMIT-Store/

          # Navigate to the COSC2767-RMIT-Store directory
          cd ~/COSC2767-RMIT-Store/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."

          # Source .bashrc to apply changes
          source ~/.bashrc
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          # Clone RMIT Store repository
          git clone -b dev https://github.com/RMIT-DevOps-Hackathon/COSC2767-RMIT-Store.git

          # Install MariaDB Server
          sudo yum install -y mariadb-server
          sudo service mariadb start
          sudo systemctl enable mariadb

          echo "Installing docker..."
          sudo yum install docker -y
          # Add group membership for the default ec2-user
          # so you can run all docker commands without using the sudo command

          # Prepare permission for Docker
          sudo usermod -a -G docker ec2-user
          # Run subsequent commands in the current shell without using newgrp
          (
            # Enable docker service at AMI boot time and start docker service
            sudo systemctl enable --now docker.service
            sudo systemctl start docker.service
            service docker status
          )

  RMITStoreEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: s3804811_asm2
      SecurityGroupIds: 
        - minikube
      Tags: 
        - Key: Name
          Value: RMIT_Store
      Monitoring: true
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -

          # Change hostname
          rm -f /etc/hostname
          echo "dev_server" >> /etc/hostname

          echo '
          #!/bin/bash

          # Check if COSC2767-RMIT-Store/ exists
          if [ -d "COSC2767-RMIT-Store" ]; then
              echo "Removing COSC2767-RMIT-Store/..."
              rm -rf COSC2767-RMIT-Store/
              echo "COSC2767-RMIT-Store/ removed."
          fi

          git clone -b dev https://github.com/RMIT-DevOps-Hackathon/COSC2767-RMIT-Store.git

          # Install tree command to show the directory tree of the pulled repository
          sudo yum install tree -y
          tree ~/COSC2767-RMIT-Store/

          # Navigate to the COSC2767-RMIT-Store directory
          cd ~/COSC2767-RMIT-Store/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."

          # Source .bashrc to apply changes
          source ~/.bashrc
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          # Install PHP and php-mysql module
          sudo yum install -y php php-mysql

          # Install Apache server
          sudo yum install -y httpd
          sudo service httpd start
          sudo systemctl enable httpd

          echo "Installing docker..."
          sudo yum install docker -y
          # Add group membership for the default ec2-user
          # so you can run all docker commands without using the sudo command

          # Prepare permission for Docker
          sudo usermod -a -G docker ec2-user
          # Run subsequent commands in the current shell without using newgrp
          (
            # Enable docker service at AMI boot time and start docker service
            sudo systemctl enable --now docker.service
            sudo systemctl start docker.service
            service docker status
          )

          # Run my prepared Docker Image
          sudo docker stop $(sudo docker ps -aq)
          kill $(lsof -t -i tcp:80)
          docker run -d --name my-rmit-store -p 80:80 laansdole/s3963207-rmit-store

  RMITStoreEIP:
    Type: AWS::EC2::EIP
    Properties:
      {}
    
  RMITStoreEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt RMITStoreEIP.AllocationId
      InstanceId: !Ref RMITStoreEC2Instance

  RMITStoreRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      Dimensions:
      - Name: InstanceId
        Value: !Ref RMITStoreEC2Instance

Outputs:
  ElasticIP:
    Description: Elastic IP Value
    Value: !Ref RMITStoreEIP